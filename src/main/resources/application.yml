server:
  port: 8081

logging:
  level:
    org.springframework.ai.mcp: DEBUG
    io.modelcontextprotocol: DEBUG

spring:
  config:
    import: optional:file:.env[.properties]
  jackson:
    property-naming-strategy: SNAKE_CASE
  ai:
    model:
      chat: openai
    openai:
      api-key: ${OPENAI_API_KEY}
      base-url: ${OPENAI_BASE_URL}
      chat:
        options:
          model: ${OPENAI_MODEL}
          temperature: 1
    # --- MCP Client: STDIO로 DuckDuckGo MCP를 자식 프로세스로 실행 ---
    mcp:
      client:
        enabled: true
        type: SYNC            # 또는 ASYNC
        request-timeout: 30s
        stdio:
          connections:
            # DuckDuckGo MCP
            duck:
              command: ${DDG_CMD}
              args: []
            # tavily
            tavily:
              command: ${NPX_PATH:npx}
              args:
                - -y
                - mcp-remote
                - https://mcp.tavily.com/mcp/?tavilyApiKey=${TAVILY_API_KEY}

# prompt 경로 및 Section 매핑
ai:
  defaults:
    maxItems: 5
    webRagItems: [ ]      # 더미
    dartRagItems: [ ]     # 더미
  prompts:
    draft_default: "classpath:prompts/draft_default.st"
    validator_default: "classpath:prompts/validator_default.st"
    validator_risk: "classpath:prompts/validator_risk.st"
    validator_user: "classpath:prompts/validator_user.st"
    adjust_default: "classpath:prompts/adjust_default.st"
    adjust_user: "classpath:prompts/adjust_user.st"
    fetch_sys: "classpath:prompts/fetch_sys.st"
    fetch_user: "classpath:prompts/fetch_user.st"
    search_sys: "classpath:prompts/search_sys.st"
    search_user: "classpath:prompts/search_user.st"
    web_validator_user: "classpath:prompts/web_validator_user.st"
    web_validator_sys: "classpath:prompts/web_validator_sys.st"


  sections:
    # 사업위험
    risk_industry:
      prompt: "classpath:prompts/risk_industry.st"
      sources: [web, db]
      label: "사업위험"
      filter: "industry"

    # 회사위험
    risk_company:
      prompt: "classpath:prompts/risk_company.st"
      sources: [news, db]
      label: "회사위험"
      filter: "financial"

    # 기타위험
    risk_etc:
      prompt: "classpath:prompts/risk_etc.st"
      sources: [db]
      label: "기타 투자위험"
      filter: "latest"

  # main 랭그래프 실행 section 지정 리스트
#  default-order: [risk_industry, risk_company, risk_etc]
  default-order: [risk_industry]

# Opensearch - 보안X(HTTP, 기본 인증 없음)
opensearch:
  uris: ${OPENSEARCH_URIS}
  connection-timeout: 5s     # connect timeout
  socket-timeout: 60s        # read timeout
  max-conn-total: 100
  max-conn-per-route: 100
  sniff-enabled: false       # Managed/로컬 모두 기본 false 권장

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:ai-backend-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: true


#  APP_KAFKA_ENABLED=false
#  APP_KAFKA_LOG_LEVEL=OFF